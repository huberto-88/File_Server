type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Main {

        private List<File> fileArray = new ArrayList<>(10);
        private static int counter;

        public static void main(String[] args) {
            Main server = new Main();
            Scanner scanner = new Scanner(System.in);

            for (;;) {
                String action = scanner.next();
                String pathname = scanner.nextLine();

                switch (action) {

                    case "add":
                        server.addFile(pathname);
                        break;
                    case "get":
                        try {
                            server.getFile(pathname);
                        } catch (FileNotFoundException e) {}
                        break;
                    case "delete":
                        server.delate(pathname);
                        break;
                    case "exit":
                        System.exit(0);
                        break;
                    default:
                        System.out.println("Unrecognised command");
                }
            }

        }

        public void addFile(String pathname) {
            File file = new File(pathname);
            if(pathname.matches("\\s*file([1-9]|10)\\s*") && counter <= 10 && !fileArray.contains(file)) {
                fileArray.add(file);
                System.out.println("The file" + file.getName() + " added successfully");
                counter++;
            }else {
                System.out.println("Cannot add the file" + file.getName());
            }
        }

        public File getFile(String pathname) throws FileNotFoundException {
            File file = new File(pathname);
            if (fileArray.contains(file)) {
                System.out.println("The file" + file.getName() + " was sent");
                return file;
            } else {
                System.out.println("The file" + file.getName() + " not found");
                return null;
            }
        }

        public void delate(String pathname) {
            File file = new File(pathname);
            if (fileArray.contains(file)) {
                System.out.println("The file" + file.getName() + " was deleted");
                fileArray.remove(file);
                counter--;
            } else {
                System.out.println("The file" + file.getName() + " not found");
            }
        }

    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class FileServerTest extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram client = new TestedProgram("client");
            TestedProgram server = new TestedProgram("server");
            server.setReturnOutputAfterExecution(true);

            server.startInBackground();

            Thread.sleep(1000);
            String serverOutput = server.getOutput().trim();

            String serverStartedMessage = "Server started!";
            if (!serverOutput.equals(serverStartedMessage)) {
                throw new WrongAnswer("Server output should be \"" + serverStartedMessage + "\" until the client connects!");
            }

            String clientOutput = client.start().trim();
            serverOutput = server.getOutput().trim();

            if (clientOutput.isEmpty()) {
                return CheckResult.wrong("Client output shouldn't be empty!");
            }

            if (serverOutput.equals(serverStartedMessage)) {
                return CheckResult.wrong("After the client connects to the server you should output the received data!");
            }

            if (!serverOutput.contains("Received: Give me everything you have!")) {
                return CheckResult.wrong("Server output should contain \"Received: Give me everything you have!\"");
            }

            if (!serverOutput.contains("Sent: All files were sent!")) {
                return CheckResult.wrong("Server output should contain \"Sent: All files were sent!\"");
            }

            if (serverOutput.indexOf("Sent: All files were sent!") < serverOutput.indexOf("Received: Give me everything you have!")) {
                return CheckResult.wrong("The server should print \"Sent: All files were sent!\" only after " +
                    "\"Received: Give me everything you have!\" was printed!");
            }

            if (!clientOutput.contains("Sent: Give me everything you have!")) {
                return CheckResult.wrong("Client output should contain \"Sent: Give me everything you have!\"");
            }

            if (!clientOutput.contains("Received: All files were sent!")) {
                return CheckResult.wrong("Client output should contain \"Received: All files were sent!\"");
            }

            if (clientOutput.indexOf("Received: All files were sent!") < clientOutput.indexOf("Sent: Give me everything you have!")) {
                return CheckResult.wrong("The client should print \"Received: All files were sent!\" only after " +
                    "\"Sent: Give me everything you have!\" was printed!");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/client/Main.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/52/stages/284/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 10 Nov 2021 11:15:46 UTC
record: 1
